{"ast":null,"code":"var _jsxFileName = \"/home/amath/Documents/6dlabs/src/components/subscribe.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\nimport { useFormFields, useMailChimpForm } from \"use-mailchimp-form\";\nexport default function Subscribe() {\n  const url = \"https://6dlabs.us21.list-manage.com/subscribe/post?u=3984937f18a637434499cf40c&amp;id=986ac0ecc8&amp;f_id=00cbe3e1f0\";\n  const {\n    loading,\n    error,\n    success,\n    message,\n    handleSubmit\n  } = useMailChimpForm(url);\n  const isSubscribed = message == \"Thank you for subscribing!\" && verified;\n  const {\n    fields,\n    handleFieldChange\n  } = useFormFields({\n    EMAIL: \"\"\n  }); // 1. Create a reference to the input so we can fetch/clear it's value.\n\n  const inputEl = useRef(null); // 2. Hold a status in state to handle the response from our API.\n\n  const {\n    0: status,\n    1: setStatus\n  } = useState({\n    submitted: false,\n    submitting: false,\n    info: {\n      error: false,\n      msg: null\n    }\n  });\n\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: {\n          error: true,\n          msg: errorMsg\n        }\n      });\n      return;\n    } // 5. Clear the input value and show a success message.\n\n\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: {\n        error: false,\n        msg: successMsg\n      }\n    });\n    inputEl.current.value = '';\n  };\n\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: {\n          error: false,\n          msg: msg\n        }\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: {\n          error: true,\n          msg: msg\n        }\n      });\n    }\n  };\n\n  const subscribe = async e => {\n    e.preventDefault();\n    setStatus(prevStatus => _objectSpread(_objectSpread({}, prevStatus), {}, {\n      submitting: true\n    })); // 3. Send a request to our API with the user's email address.\n\n    const res = await fetch('https://us21.api.mailchimp.com/3.0/lists/986ac0ecc8/members', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      },\n      method: 'POST'\n    }); //for mailChimp integration\n\n    const {\n      error\n    } = await res.json();\n    handleMailChimpResponse(error, 'Success! ðŸŽ‰ You are now subscribed to the newsletter.'); // For sendGrid integration\n\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n\n  return jsx(\"div\", {\n    className: \"subscribe__area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, jsx(\"form\", {\n    onSubmit: subscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, jsx(Flex, {\n    sx: styles.subscribeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, jsx(\"label\", {\n    htmlFor: \"email\",\n    sx: {\n      variant: 'styles.srOnly'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, \"Email Address\"), jsx(Input, {\n    ref: inputEl,\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Enter your email\",\n    value: fields.EMAIL,\n    onChange: handleFieldChange,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, status.info.error && jsx(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, \"Error: \", status.info.msg), !status.info.error && status.info.msg && jsx(\"div\", {\n    className: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 15\n    }\n  }, status.info.msg)), jsx(Button, {\n    onClick: event => {\n      event.preventDefault();\n      handleSubmit(fields);\n    },\n    type: \"submit\",\n    disabled: status.submitting,\n    variant: \"subscribeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, !status.submitting ? !status.submitted ? 'Subscribe' : 'Submitted' : 'Submitting...'))));\n}\nconst styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary'\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/home/amath/Documents/6dlabs/src/components/subscribe.js"],"names":["useRef","useState","jsx","Flex","Button","Input","useFormFields","useMailChimpForm","Subscribe","url","loading","error","success","message","handleSubmit","isSubscribed","verified","fields","handleFieldChange","EMAIL","inputEl","status","setStatus","submitted","submitting","info","msg","handleMailChimpResponse","errorMsg","successMsg","current","value","handleSendGridResponse","subscribe","e","preventDefault","prevStatus","res","fetch","body","JSON","stringify","email","headers","method","json","text","styles","subscribeForm","variant","event","width","mx","border","borderRadius","fontFamily","fontSize","fontWeight","color","py","px","backgroundColor","transition","height","boxShadow","borderColor","opacity"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\nimport { useFormFields, useMailChimpForm } from \"use-mailchimp-form\";\n\n\nexport default function Subscribe() {\n  const url = \"https://6dlabs.us21.list-manage.com/subscribe/post?u=3984937f18a637434499cf40c&amp;id=986ac0ecc8&amp;f_id=00cbe3e1f0\";\n  const { loading, error, success, message, handleSubmit } = useMailChimpForm(\n    url\n  );\n  const isSubscribed = (message==\"Thank you for subscribing!\") && verified;\n  const { fields, handleFieldChange } = useFormFields({\n    EMAIL: \"\"\n    \n  });\n\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a status in state to handle the response from our API.\n  const [status, setStatus] = useState({\n    submitted: false,\n    submitting: false,\n    info: { error: false, msg: null },\n  });\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: { error: true, msg: errorMsg },\n      });\n\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: { error: false, msg: successMsg },\n    });\n    inputEl.current.value = '';\n  };\n\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: { error: false, msg: msg },\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: { error: true, msg: msg },\n      });\n    }\n  };\n\n\n  \n  const subscribe = async (e) => {\n    e.preventDefault();\n    setStatus((prevStatus) => ({ ...prevStatus, submitting: true }));\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('https://us21.api.mailchimp.com/3.0/lists/986ac0ecc8/members', {\n      body: JSON.stringify({\n        email: inputEl.current.value,\n      }),\n      headers: {\n        'Content-Type': 'application/json', \n        'Access-Control-Allow-Origin' : '*',\n      },\n      method: 'POST',\n    });\n    //for mailChimp integration\n    const { error } = await res.json();\n    handleMailChimpResponse(\n      error,\n      'Success! ðŸŽ‰ You are now subscribed to the newsletter.'\n    );\n    // For sendGrid integration\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n  return (\n    <div className=\"subscribe__area\">\n      <form onSubmit={subscribe}>\n        <Flex sx={styles.subscribeForm}>\n          <label htmlFor=\"email\" sx={{ variant: 'styles.srOnly' }}>\n            Email Address\n          </label>\n          <Input\n            ref={inputEl}\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Enter your email\"\n            value={fields.EMAIL} onChange={handleFieldChange} required\n          />\n\n          <div>\n            {status.info.error && (\n              <div className=\"error\">Error: {status.info.msg}</div>\n            )}\n            {!status.info.error && status.info.msg && (\n              <div className=\"success\">{status.info.msg}</div>\n            )}\n          </div>\n          <Button\n            onClick={(event) => {\n              event.preventDefault();\n              handleSubmit(fields);   \n              }}\n            type=\"submit\"\n            disabled={status.submitting}\n            variant=\"subscribeButton\"\n          >\n            {!status.submitting\n              ? !status.submitted\n                ? 'Subscribe'\n                : 'Submitted'\n              : 'Submitting...'}\n          </Button>\n        </Flex>\n      </form>\n    </div>\n  );\n}\n\nconst styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary',\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1,\n      },\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}