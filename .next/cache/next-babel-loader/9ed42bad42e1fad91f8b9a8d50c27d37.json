{"ast":null,"code":"var _jsxFileName = \"/home/amath/Documents/6dlabs/src/components/subscribe.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a status in state to handle the response from our API.\n  const {\n    0: status,\n    1: setStatus\n  } = useState({\n    submitted: false,\n    submitting: false,\n    info: {\n      error: false,\n      msg: null\n    }\n  });\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: {\n          error: true,\n          msg: errorMsg\n        }\n      });\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: {\n        error: false,\n        msg: successMsg\n      }\n    });\n    inputEl.current.value = '';\n  };\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: {\n          error: false,\n          msg: msg\n        }\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: {\n          error: true,\n          msg: msg\n        }\n      });\n    }\n  };\n  const subscribe = async e => {\n    e.preventDefault();\n    setStatus(prevStatus => _objectSpread(_objectSpread({}, prevStatus), {}, {\n      submitting: true\n    }));\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('/', {\n      body: JSON.stringify({\n        email: inputEl.current.value\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    });\n    //for mailChimp integration\n    const {\n      error\n    } = await res.json();\n    handleMailChimpResponse(error, 'Success! ðŸŽ‰ You are now subscribed to the newsletter.');\n    // For sendGrid integration\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n  return jsx(\"div\", {\n    className: \"subscribe__area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, jsx(\"form\", {\n    onSubmit: subscribe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, jsx(Flex, {\n    sx: styles.subscribeForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, jsx(\"label\", {\n    htmlFor: \"email\",\n    sx: {\n      variant: 'styles.srOnly'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }\n  }, \"Email Address\"), jsx(Input, {\n    ref: inputEl,\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Enter your email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }), jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, status.info.error && jsx(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, \"Error: \", status.info.msg), !status.info.error && status.info.msg && jsx(\"div\", {\n    className: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, status.info.msg)), jsx(Button, {\n    type: \"submit\",\n    disabled: status.submitting,\n    variant: \"subscribeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, !status.submitting ? !status.submitted ? 'Subscribe' : 'Submitted' : 'Submitting...'))));\n}\nconst styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary'\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1\n      }\n    }\n  }\n};","map":{"version":3,"names":["useRef","useState","jsx","Flex","Button","Input","Subscribe","inputEl","status","setStatus","submitted","submitting","info","error","msg","handleMailChimpResponse","errorMsg","successMsg","current","value","handleSendGridResponse","subscribe","e","preventDefault","prevStatus","res","fetch","body","JSON","stringify","email","headers","method","json","text","styles","subscribeForm","variant","width","mx","border","borderRadius","fontFamily","fontSize","fontWeight","color","py","px","backgroundColor","transition","height","boxShadow","borderColor","opacity"],"sources":["/home/amath/Documents/6dlabs/src/components/subscribe.js"],"sourcesContent":["/** @jsx jsx */\nimport { useRef, useState } from 'react';\nimport { jsx } from 'theme-ui';\nimport { Flex, Button, Input } from 'theme-ui';\n\nexport default function Subscribe() {\n  // 1. Create a reference to the input so we can fetch/clear it's value.\n  const inputEl = useRef(null);\n  // 2. Hold a status in state to handle the response from our API.\n  const [status, setStatus] = useState({\n    submitted: false,\n    submitting: false,\n    info: { error: false, msg: null },\n  });\n  const handleMailChimpResponse = (errorMsg, successMsg) => {\n    if (errorMsg) {\n      // 4. If there was an error, update the message in state.\n      setStatus({\n        info: { error: true, msg: errorMsg },\n      });\n\n      return;\n    }\n\n    // 5. Clear the input value and show a success message.\n    setStatus({\n      submitted: true,\n      submitting: false,\n      info: { error: false, msg: successMsg },\n    });\n    inputEl.current.value = '';\n  };\n\n  const handleSendGridResponse = (status, msg) => {\n    if (status === 200) {\n      // 5. Clear the input value and show a success message.\n      setStatus({\n        submitted: true,\n        submitting: false,\n        info: { error: false, msg: msg },\n      });\n      inputEl.current.value = '';\n    } else {\n      setStatus({\n        info: { error: true, msg: msg },\n      });\n    }\n  };\n  const subscribe = async (e) => {\n    e.preventDefault();\n    setStatus((prevStatus) => ({ ...prevStatus, submitting: true }));\n\n    // 3. Send a request to our API with the user's email address.\n    const res = await fetch('/', {\n      body: JSON.stringify({\n        email: inputEl.current.value,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    });\n    //for mailChimp integration\n    const { error } = await res.json();\n    handleMailChimpResponse(\n      error,\n      'Success! ðŸŽ‰ You are now subscribed to the newsletter.'\n    );\n    // For sendGrid integration\n    const text = await res.text();\n    handleSendGridResponse(res.status, text);\n  };\n  return (\n    <div className=\"subscribe__area\">\n      <form onSubmit={subscribe}>\n        <Flex sx={styles.subscribeForm}>\n          <label htmlFor=\"email\" sx={{ variant: 'styles.srOnly' }}>\n            Email Address\n          </label>\n          <Input\n            ref={inputEl}\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            placeholder=\"Enter your email\"\n          />\n\n          <div>\n            {status.info.error && (\n              <div className=\"error\">Error: {status.info.msg}</div>\n            )}\n            {!status.info.error && status.info.msg && (\n              <div className=\"success\">{status.info.msg}</div>\n            )}\n          </div>\n          <Button\n            type=\"submit\"\n            disabled={status.submitting}\n            variant=\"subscribeButton\"\n          >\n            {!status.submitting\n              ? !status.submitted\n                ? 'Subscribe'\n                : 'Submitted'\n              : 'Submitting...'}\n          </Button>\n        </Flex>\n      </form>\n    </div>\n  );\n}\n\nconst styles = {\n  subscribeForm: {\n    width: '100%',\n    mx: 'auto',\n    '[type=\"email\"]': {\n      border: '1px solid #D4DAE2',\n      borderRadius: '7px',\n      fontFamily: 'body',\n      fontSize: [1, 2, 3],\n      fontWeight: 'body',\n      color: 'heading',\n      py: 1,\n      px: [3, 5],\n      backgroundColor: 'transparent',\n      transition: 'all 0.25s',\n      height: ['50px', '60px'],\n      '&:focus': {\n        boxShadow: '0 0 0 0px',\n        borderColor: 'primary',\n      },\n      '::placeholder': {\n        color: '#9A9CB2',\n        opacity: 1,\n      },\n    },\n  },\n};\n"],"mappings":";;;;;;;;AAAA;AACA,SAASA,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACxC,SAASC,GAAG,QAAQ,UAAU;AAC9B,SAASC,IAAI,EAAEC,MAAM,EAAEC,KAAK,QAAQ,UAAU;AAE9C,eAAe,SAASC,SAAS,GAAG;EAClC;EACA,MAAMC,OAAO,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC5B;EACA,MAAM;IAAA,GAACQ,MAAM;IAAA,GAAEC;EAAS,IAAIR,QAAQ,CAAC;IACnCS,SAAS,EAAE,KAAK;IAChBC,UAAU,EAAE,KAAK;IACjBC,IAAI,EAAE;MAAEC,KAAK,EAAE,KAAK;MAAEC,GAAG,EAAE;IAAK;EAClC,CAAC,CAAC;EACF,MAAMC,uBAAuB,GAAG,CAACC,QAAQ,EAAEC,UAAU,KAAK;IACxD,IAAID,QAAQ,EAAE;MACZ;MACAP,SAAS,CAAC;QACRG,IAAI,EAAE;UAAEC,KAAK,EAAE,IAAI;UAAEC,GAAG,EAAEE;QAAS;MACrC,CAAC,CAAC;MAEF;IACF;;IAEA;IACAP,SAAS,CAAC;MACRC,SAAS,EAAE,IAAI;MACfC,UAAU,EAAE,KAAK;MACjBC,IAAI,EAAE;QAAEC,KAAK,EAAE,KAAK;QAAEC,GAAG,EAAEG;MAAW;IACxC,CAAC,CAAC;IACFV,OAAO,CAACW,OAAO,CAACC,KAAK,GAAG,EAAE;EAC5B,CAAC;EAED,MAAMC,sBAAsB,GAAG,CAACZ,MAAM,EAAEM,GAAG,KAAK;IAC9C,IAAIN,MAAM,KAAK,GAAG,EAAE;MAClB;MACAC,SAAS,CAAC;QACRC,SAAS,EAAE,IAAI;QACfC,UAAU,EAAE,KAAK;QACjBC,IAAI,EAAE;UAAEC,KAAK,EAAE,KAAK;UAAEC,GAAG,EAAEA;QAAI;MACjC,CAAC,CAAC;MACFP,OAAO,CAACW,OAAO,CAACC,KAAK,GAAG,EAAE;IAC5B,CAAC,MAAM;MACLV,SAAS,CAAC;QACRG,IAAI,EAAE;UAAEC,KAAK,EAAE,IAAI;UAAEC,GAAG,EAAEA;QAAI;MAChC,CAAC,CAAC;IACJ;EACF,CAAC;EACD,MAAMO,SAAS,GAAG,MAAOC,CAAC,IAAK;IAC7BA,CAAC,CAACC,cAAc,EAAE;IAClBd,SAAS,CAAEe,UAAU,oCAAWA,UAAU;MAAEb,UAAU,EAAE;IAAI,EAAG,CAAC;;IAEhE;IACA,MAAMc,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAG,EAAE;MAC3BC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,KAAK,EAAEvB,OAAO,CAACW,OAAO,CAACC;MACzB,CAAC,CAAC;MACFY,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,MAAM,EAAE;IACV,CAAC,CAAC;IACF;IACA,MAAM;MAAEnB;IAAM,CAAC,GAAG,MAAMY,GAAG,CAACQ,IAAI,EAAE;IAClClB,uBAAuB,CACrBF,KAAK,EACL,uDAAuD,CACxD;IACD;IACA,MAAMqB,IAAI,GAAG,MAAMT,GAAG,CAACS,IAAI,EAAE;IAC7Bd,sBAAsB,CAACK,GAAG,CAACjB,MAAM,EAAE0B,IAAI,CAAC;EAC1C,CAAC;EACD,OACE;IAAK,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC9B;IAAM,QAAQ,EAAEb,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACxB,IAAC,IAAI;IAAC,EAAE,EAAEc,MAAM,CAACC,aAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7B;IAAO,OAAO,EAAC,OAAO;IAAC,EAAE,EAAE;MAAEC,OAAO,EAAE;IAAgB,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,mBAEhD,EACR,IAAC,KAAK;IACJ,GAAG,EAAE9B,OAAQ;IACb,EAAE,EAAC,OAAO;IACV,IAAI,EAAC,OAAO;IACZ,IAAI,EAAC,OAAO;IACZ,WAAW,EAAC,kBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC9B,EAEF;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGC,MAAM,CAACI,IAAI,CAACC,KAAK,IAChB;IAAK,SAAS,EAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,cAASL,MAAM,CAACI,IAAI,CAACE,GAAG,CAC/C,EACA,CAACN,MAAM,CAACI,IAAI,CAACC,KAAK,IAAIL,MAAM,CAACI,IAAI,CAACE,GAAG,IACpC;IAAK,SAAS,EAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEN,MAAM,CAACI,IAAI,CAACE,GAAG,CAC1C,CACG,EACN,IAAC,MAAM;IACL,IAAI,EAAC,QAAQ;IACb,QAAQ,EAAEN,MAAM,CAACG,UAAW;IAC5B,OAAO,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAExB,CAACH,MAAM,CAACG,UAAU,GACf,CAACH,MAAM,CAACE,SAAS,GACf,WAAW,GACX,WAAW,GACb,eAAe,CACZ,CACJ,CACF,CACH;AAEV;AAEA,MAAMyB,MAAM,GAAG;EACbC,aAAa,EAAE;IACbE,KAAK,EAAE,MAAM;IACbC,EAAE,EAAE,MAAM;IACV,gBAAgB,EAAE;MAChBC,MAAM,EAAE,mBAAmB;MAC3BC,YAAY,EAAE,KAAK;MACnBC,UAAU,EAAE,MAAM;MAClBC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACnBC,UAAU,EAAE,MAAM;MAClBC,KAAK,EAAE,SAAS;MAChBC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACVC,eAAe,EAAE,aAAa;MAC9BC,UAAU,EAAE,WAAW;MACvBC,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MACxB,SAAS,EAAE;QACTC,SAAS,EAAE,WAAW;QACtBC,WAAW,EAAE;MACf,CAAC;MACD,eAAe,EAAE;QACfP,KAAK,EAAE,SAAS;QAChBQ,OAAO,EAAE;MACX;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module"}